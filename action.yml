# Action description and parameters
name: 'SOFA Setup Action'
description: 'Setup everything needed to build a SOFA plugin'
inputs:
  sofa_root:
    description: 'SOFA install directory'
    required: true
  sofa_version:
    description: 'Major version of SOFA to install'
    required: true
  sofa_scope:
    description: 'Choose between: minimal, standard, full'
    default: 'standard'
  sofa_with_sofapython3:
    description: 'SofaPython3 is embedded in SOFA package'
    default: 'true'
  python_version:
    description: 'Python version to install'
    default: '3.8'
  numpy_version:
    description: 'numpy version to install'
    default: 'latest'
  scipy_version:
    description: 'scipy version to install'
    default: 'latest'
  pybind11_version:
    description: 'pybind11 version to install'
    default: '2.4.3'
  qt_version:
    description: 'Qt version to install'
    default: '5.12.8'
  eigen_version:
    description: 'Eigen version to install'
    default: '3.3.7'
  workspace_auto_setup:
    description: 'Should this action setup your workspace tree?'
    default: 'true'
outputs:
  sofa_version:
    description: "SOFA version"
    value: ${{ inputs.sofa_version }}
  sofa_root:
    description: "SOFA root directory"
    value: ${{ steps.set-sofa-root.outputs.sofa_root }}
  exe:
    description: "Extension for executable files"
    value: ${{ steps.set-env-vars.outputs.exe }}
  run_branch:
    description: "Pretty git branch of this workflow run"
    value: ${{ steps.set-env-vars.outputs.run_branch }}
  python_root:
    description: "Root directory of the Python installed for SOFA"
    value: ${{ steps.set-python-vars.outputs.python_root }}
  python_version:
    description: "Version of the Python installed for SOFA"
    value: ${{ steps.set-python-vars.outputs.python_version }}
  python_exe:
    description: "Path to Python executable"
    value: ${{ steps.set-python-vars.outputs.python_exe }}
  vs_install_dir:
    description: "VS install directory"
    value: ${{ steps.set-env-vars.outputs.vs_install_dir }}
  vs_vsdevcmd:
    description: "Command to init VS environment"
    value: ${{ steps.set-env-vars.outputs.vs_vsdevcmd }}
  workspace_src_path:
    description: "Directory to checkout your sources after calling this action"
    value: ${{ steps.set-env-vars.outputs.workspace_src_path }}
  workspace_build_path:
    description: "Directory to build your sources after calling this action"
    value: ${{ steps.set-env-vars.outputs.workspace_build_path }}
  workspace_install_path:
    description: "Directory to install your binaries after calling this action"
    value: ${{ steps.set-env-vars.outputs.workspace_install_path }}
  workspace_artifact_path:
    description: "Directory to package your binaries after calling this action"
    value: ${{ steps.set-env-vars.outputs.workspace_artifact_path }}

# Action code
runs:
  using: "composite"
  steps:
    - name: Clear tool cache and PATH
      shell: bash
      run: |
        mv "${{ runner.tool_cache }}" "${{ runner.tool_cache }}.old"
        mkdir -p "${{ runner.tool_cache }}"

    - name: Set env vars
      id: set-env-vars
      shell: bash
      run: |
        # Set env vars
        echo "------ GITHUB_WORKSPACE/sofa-setup-action ------"
        mkdir -p "$GITHUB_WORKSPACE/sofa-setup-action"
        cp "${{ github.action_path }}"/*.yml "$GITHUB_WORKSPACE/sofa-setup-action"
        ls -la "$GITHUB_WORKSPACE/sofa-setup-action"
        echo "------------------------------------------------"
        
        # Set executable extension
        EXE=''
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          EXE='.exe'
        fi
        echo "EXE=$EXE" | tee -a $GITHUB_ENV
        echo "::set-output name=exe::$(echo $EXE)"
        
        if [ -n "${{ github.event.number }}" ]; then
          RUN_BRANCH="PR-${{ github.event.number }}"
        elif [ -n "${{ github.event.pull_request.number }}" ]; then
          RUN_BRANCH="PR-${{ github.event.pull_request.number }}"
        elif [ -n "${{ github.event.issue.number }}" ]; then
          RUN_BRANCH="PR-${{ github.event.issue.number }}"
        else
          RUN_BRANCH="${GITHUB_REF#refs/heads/}"
        fi
        echo "RUN_BRANCH=$RUN_BRANCH" | tee -a $GITHUB_ENV
        echo "::set-output name=run_branch::$(echo $RUN_BRANCH)"
        
        # Auto-setup workspace + env vars
        if [[ "${{ inputs.workspace_auto_setup }}" == "true" ]]; then
          mkdir -p "$GITHUB_WORKSPACE/src" "$GITHUB_WORKSPACE/build" "$GITHUB_WORKSPACE/install" "$GITHUB_WORKSPACE/artifact"
               WORKSPACE_SRC_PATH="$(cd $GITHUB_WORKSPACE/src      && pwd -W 2>/dev/null || pwd)"
             WORKSPACE_BUILD_PATH="$(cd $GITHUB_WORKSPACE/build    && pwd -W 2>/dev/null || pwd)"
           WORKSPACE_INSTALL_PATH="$(cd $GITHUB_WORKSPACE/install  && pwd -W 2>/dev/null || pwd)"
          WORKSPACE_ARTIFACT_PATH="$(cd $GITHUB_WORKSPACE/artifact && pwd -W 2>/dev/null || pwd)"
        else
               WORKSPACE_SRC_PATH="$GITHUB_WORKSPACE"
             WORKSPACE_BUILD_PATH="$GITHUB_WORKSPACE"
           WORKSPACE_INSTALL_PATH="$GITHUB_WORKSPACE"
          WORKSPACE_ARTIFACT_PATH="$GITHUB_WORKSPACE"
        fi
        echo "WORKSPACE_SRC_PATH=$WORKSPACE_SRC_PATH" | tee -a $GITHUB_ENV
        echo "WORKSPACE_BUILD_PATH=$WORKSPACE_BUILD_PATH" | tee -a $GITHUB_ENV
        echo "WORKSPACE_INSTALL_PATH=$WORKSPACE_INSTALL_PATH" | tee -a $GITHUB_ENV
        echo "WORKSPACE_ARTIFACT_PATH=$WORKSPACE_ARTIFACT_PATH" | tee -a $GITHUB_ENV
        echo "::set-output name=workspace_src_path::$(echo $WORKSPACE_SRC_PATH)"
        echo "::set-output name=workspace_build_path::$(echo $WORKSPACE_BUILD_PATH)"
        echo "::set-output name=workspace_install_path::$(echo $WORKSPACE_INSTALL_PATH)"
        echo "::set-output name=workspace_artifact_path::$(echo $WORKSPACE_ARTIFACT_PATH)"
        
        # Set default settings for ccache
        echo "CCACHE_COMPRESS=true" | tee -a $GITHUB_ENV
        echo "CCACHE_COMPRESSLEVEL=6" | tee -a $GITHUB_ENV
        echo "CCACHE_MAXSIZE=1G" | tee -a $GITHUB_ENV
        echo "CCACHE_BASEDIR=$WORKSPACE_BUILD_PATH" | tee -a $GITHUB_ENV
        echo "CCACHE_DIR=$GITHUB_WORKSPACE/.ccache" | tee -a $GITHUB_ENV
        
        # TODO: find a better way to handle dependency versions
        QT_INSTALL_DIR="$HOME/Qt"
        EIGEN_INSTALL_DIR="$(cd "$HOME" && pwd -W 2>/dev/null || pwd)/eigen"
        BOOST_INSTALL_DIR="/tmp/deps_cache_is_for_windows_only"
        PYBIND11_INSTALL_DIR="${{ runner.temp }}/pybind11"
        SUDO='sudo'
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          BOOST_VERSION="apt-latest"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          BOOST_VERSION="brew-latest"
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          SUDO=''
          QT_INSTALL_DIR="C:/Qt"
          EIGEN_INSTALL_DIR="C:/eigen"
          BOOST_VERSION=1.69.0
          BOOST_INSTALL_DIR="C:/boost"
          
          # vsdevcmd.bat is here: 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/Tools/vsdevcmd.bat'
          VS_INSTALL_DIR="$(cmd //c 'vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath')"
          VS_VSDEVCMD='cd /d '$VS_INSTALL_DIR'\Common7\Tools && VsDevCmd.bat -host_arch=amd64 -arch=amd64'
        fi
        
        echo "SUDO=$SUDO" | tee -a $GITHUB_ENV
        echo "QT_INSTALL_DIR=$QT_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "EIGEN_INSTALL_DIR=$EIGEN_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "BOOST_VERSION=$BOOST_VERSION" | tee -a $GITHUB_ENV
        echo "BOOST_INSTALL_DIR=$BOOST_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "PYBIND11_INSTALL_DIR=$PYBIND11_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "VS_INSTALL_DIR=$VS_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "VS_VSDEVCMD=$VS_VSDEVCMD" | tee -a $GITHUB_ENV
        
        echo "::set-output name=vs_install_dir::$(echo $VS_INSTALL_DIR)"
        echo "::set-output name=vs_vsdevcmd::$(echo $VS_VSDEVCMD)"

    - name: Install build tools
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get -qq install ccache ninja-build
          sudo apt-get -qq install freeglut3-dev libopengl0
          sudo apt-get -qq install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew update && brew upgrade
          brew install ccache ninja
          brew install glew
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          cmd //c 'choco install -y --no-progress nsis curl ninja'
        fi

    - name: Install Python
      id: install-python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python_version }}

    - name: Set python-dependent env vars
      id: set-python-vars
      shell: bash
      run: |
        PYTHONUSERBASE='/tmp/pythonuserbase'
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          PYTHONUSERBASE='C:\pythonuserbase'
        fi
        mkdir -p "$PYTHONUSERBASE" && chmod -R 777 "$PYTHONUSERBASE"
        echo "PYTHONUSERBASE=$PYTHONUSERBASE" | tee -a $GITHUB_ENV
        echo "PYTHONIOENCODING=UTF-8" | tee -a $GITHUB_ENV
        
        # Set PYTHON_ROOT and PYTHON_EXE
        PYTHON_ROOT="$(find $RUNNER_TOOL_CACHE -maxdepth 3 -type d -path '**/Python/${{ steps.install-python.outputs.python-version }}*/x64')"
        PYTHON_ROOT="$(cd $PYTHON_ROOT && pwd -W 2>/dev/null || pwd)"
        if [ -e "$PYTHON_ROOT/python.exe" ]; then
          PYTHON_EXE="$PYTHON_ROOT/python.exe"
        elif [ -e "$PYTHON_ROOT/python" ]; then
          PYTHON_EXE="$PYTHON_ROOT/python"
        else
          PYTHON_EXE="python-executable-not-found"
        fi
        echo "PYTHON_ROOT=$PYTHON_ROOT" | tee -a $GITHUB_ENV
        echo "Python_ROOT=$PYTHON_ROOT" | tee -a $GITHUB_ENV
        echo "PYTHON_EXE=$PYTHON_EXE" | tee -a $GITHUB_ENV
        echo "::set-output name=python_root::$(echo $PYTHON_ROOT)"
        echo "::set-output name=python_version::${{ steps.install-python.outputs.python-version }}"
        echo "::set-output name=python_exe::$(echo $PYTHON_EXE)"
        echo "------- ls -la PYTHON_ROOT -------"
        ls -la "$PYTHON_ROOT"
        echo "----------------------------------"
        
        # Upgrade pip
        $PYTHON_EXE -m pip install --upgrade pip
        
        # Set SOFA_VERSION_FOR_DEPS
        SOFA_VERSION_FOR_DEPS="$(echo "${{ inputs.sofa_version }}" | sed 's:[^0-9]*::g')"
        if [ -z "$SOFA_VERSION_FOR_DEPS" ]; then
          SOFA_VERSION_FOR_DEPS=0
        fi
        echo "SOFA_VERSION_FOR_DEPS=$SOFA_VERSION_FOR_DEPS" | tee -a $GITHUB_ENV

    - name: Install numpy ${{ inputs.numpy_version }} and scipy ${{ inputs.scipy_version }}
      shell: bash
      run: |
        if [[ "${{ inputs.numpy_version }}" == "latest" ]]; then
            $PYTHON_EXE -m pip install numpy
        else
            $PYTHON_EXE -m pip install numpy==${{ inputs.numpy_version }}
        fi
        if [[ "${{ inputs.scipy_version }}" == "latest" ]]; then
            $PYTHON_EXE -m pip install scipy
        else
            $PYTHON_EXE -m pip install scipy==${{ inputs.scipy_version }}
        fi
        echo '---- pip show numpy scipy ----'
        $PYTHON_EXE -m pip show numpy scipy
        echo '------------------------------'
 
    - name: Setup cache for pybind11 files
      uses: actions/cache@v2
      id: pybind11_cache
      with:
        path: ${{ env.PYBIND11_INSTALL_DIR }}
        key: pybind11-${{ inputs.pybind11_version }}_${{ runner.os }}_python-${{ inputs.python_version }}_${{ hashFiles('**/*.yml') }}
    
    - name: Install pybind11 ${{ inputs.pybind11_version }}
      shell: bash
      run: |
        # TODO: use pip when minimal supported pybind11 will be >= 2.6.2
        #$PYTHON_EXE -m pip install pybind11==${{ inputs.pybind11_version }}
        #pybind11_DIR="pybind11-dir-not-found"
        #if [ -e "$(command -v pybind11-config)" ]; then
        #  pybind11_DIR="$(pybind11-config --cmakedir)"
        #elif [ -e "$(command -v pybind11-config-${{ inputs.python_version }})" ]; then
        #  pybind11_DIR="$(pybind11-config-${{ inputs.python_version }} --cmakedir)"
        #fi
        
        if ! ls -a "$PYBIND11_INSTALL_DIR"/* >/dev/null 2>&1; then
          # directory does not exist or is empty
          git clone -b v${{ inputs.pybind11_version }} --depth 1 https://github.com/pybind/pybind11.git "${{ runner.temp }}/pybind11_tmp"          
          cmake_options="-GNinja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX=$PYBIND11_INSTALL_DIR \
              -DPYBIND11_TEST=OFF \
              -DPYTHON_EXECUTABLE=$PYTHON_EXE \
              "
          cmake_options="$(echo $cmake_options)" # prettify          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cmd //c "$VS_VSDEVCMD \
              && cd /d ${{ runner.temp }}/pybind11_tmp \
              && cmake $cmake_options . \
              && ninja install"
          else
            cd "${{ runner.temp }}/pybind11_tmp"
            cmake $cmake_options .
            ninja install
          fi
        fi
        
        pybind11_DIR="$PYBIND11_INSTALL_DIR/share/cmake/pybind11"
        echo "pybind11_DIR=$pybind11_DIR" | tee -a $GITHUB_ENV

    - name: Setup cache for Qt files
      if: inputs.sofa_scope != 'minimal'
      uses: actions/cache@v2
      id: qt_cache
      with:
        path: ${{ env.QT_INSTALL_DIR }}
        key: qt-${{ inputs.qt_version }}_${{ runner.os }}_for-SOFA-${{ inputs.sofa_version }}_${{ hashFiles('**/*.yml') }}
        
    - name: Install Qt
      if: inputs.sofa_scope != 'minimal'
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          qt_os="linux"
          qt_compiler="gcc_64"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          qt_os="mac"
          qt_compiler="clang_64"
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          qt_os="windows"
          qt_compiler="win64_msvc2017_64"
        fi
        if ! ls -a "$QT_INSTALL_DIR"/* >/dev/null 2>&1; then
          # directory does not exist or is empty
          $PYTHON_EXE -m pip install aqtinstall
          $PYTHON_EXE -m aqt install-qt   --outputdir $QT_INSTALL_DIR $qt_os desktop ${{ inputs.qt_version }} $qt_compiler -m qtcharts qtwebengine
          $PYTHON_EXE -m aqt install-tool --outputdir $QT_INSTALL_DIR $qt_os desktop tools_ifw
        fi
        Qt5_ROOT="$QT_INSTALL_DIR/${{ inputs.qt_version }}/${qt_compiler#*win64_}"
        Qt5_DIR="$Qt5_ROOT/lib/cmake/Qt5"
        QTIFWDIR="$(ls -d $QT_INSTALL_DIR/Tools/QtInstallerFramework/*/ | head -n 1 | sed 's://$::g')"
        echo "Qt5_ROOT=$Qt5_ROOT" | tee -a $GITHUB_ENV
        echo "Qt5_DIR=$Qt5_DIR" | tee -a $GITHUB_ENV
        echo "QTIFWDIR=$QTIFWDIR" | tee -a $GITHUB_ENV
        echo "$Qt5_ROOT" >> $GITHUB_PATH

    - name: Setup cache for Boost files
      uses: actions/cache@v2
      id: boost_cache
      with:
        path: ${{ env.BOOST_INSTALL_DIR }}
        key: boost-${{ env.BOOST_VERSION }}_${{ runner.os }}_for-SOFA-${{ inputs.sofa_version }}_${{ hashFiles('**/*.yml') }}

    - name: Install Boost
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get -qq install libboost-dev
          if [ "$SOFA_VERSION_FOR_DEPS" -lt 2112 ]; then
            sudo apt-get -qq install libboost-system-dev libboost-filesystem-dev libboost-program-options-dev libboost-thread-dev
          fi
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install boost
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          if ! ls -a "$BOOST_INSTALL_DIR"/* >/dev/null 2>&1; then
            # directory does not exist or is empty
            major="$(echo $BOOST_VERSION | cut -d. -f1)"
            minor="$(echo $BOOST_VERSION | cut -d. -f2)"
            patch="$(echo $BOOST_VERSION | cut -d. -f3)"
            if [ "$SOFA_VERSION_FOR_DEPS" -lt 2112 ]; then
              # headers and libs
              curl --output "${{ runner.temp }}/boost_tmp.exe" -L \
                "https://downloads.sourceforge.net/project/boost/boost-binaries/${BOOST_VERSION}/boost_${major}_${minor}_${patch}-msvc-14.1-64.exe"
              cmd //c "${{ runner.temp }}/boost_tmp.exe /NORESTART /VERYSILENT /DIR=$BOOST_INSTALL_DIR"
            else
              # headers only
              curl --output "${{ runner.temp }}/boost_tmp.7z" -L \
                "https://downloads.sourceforge.net/project/boost/boost/${BOOST_VERSION}/boost_${major}_${minor}_${patch}.7z"
              7z x "${{ runner.temp }}/boost_tmp.7z" -o"${{ runner.temp }}/boost_tmp"
              mv "${{ runner.temp }}"/boost_tmp/boost* "$BOOST_INSTALL_DIR"
            fi
          fi
          echo "BOOST_ROOT=$BOOST_INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "Boost_ROOT=$BOOST_INSTALL_DIR" | tee -a $GITHUB_ENV
          echo "$BOOST_INSTALL_DIR" >> $GITHUB_PATH
        fi

    - name: Setup cache for Eigen files
      uses: actions/cache@v2
      id: eigen_cache
      with:
        path: ${{ env.EIGEN_INSTALL_DIR }}
        key: eigen-${{ inputs.eigen_version }}_${{ runner.os }}_${{ hashFiles('**/*.yml') }}

    - name: Install Eigen
      shell: bash
      run: |
        if ! ls -a "$EIGEN_INSTALL_DIR"/* >/dev/null 2>&1; then
          # directory does not exist or is empty
          mkdir -p "$EIGEN_INSTALL_DIR"
          curl --output "${{ runner.temp }}/eigen_tmp.zip" -L \
            "https://gitlab.com/libeigen/eigen/-/archive/${{ inputs.eigen_version }}/eigen-${{ inputs.eigen_version }}.zip"
          unzip -qq "${{ runner.temp }}/eigen_tmp.zip" -d "${{ runner.temp }}/eigen_tmp"
          $SUDO mv "${{ runner.temp }}"/eigen_tmp/eigen-*/* $EIGEN_INSTALL_DIR
        fi
        echo "EIGEN3_ROOT=$EIGEN_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "Eigen3_ROOT=$EIGEN_INSTALL_DIR" | tee -a $GITHUB_ENV
        echo "$EIGEN_INSTALL_DIR" >> $GITHUB_PATH

    - if: inputs.sofa_version != 'master'
      name: Get the latest SOFA ${{ inputs.sofa_version }} binaries from GitHub (1/2)
      id: get_sofa_from_github
      uses: cardinalby/git-get-release-action@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        releaseNameRegEx: 'v${{ inputs.sofa_version }}.*'
        
    - if: ${{ inputs.sofa_version }} != 'master'
      name: Get the latest SOFA ${{ inputs.sofa_version }} binaries from GitHub (2/2)
      run: |
        SOFA_OS_GITHUB="$RUNNER_OS"
        if [[ "$SOFA_OS_GITHUB" == "Linux" ]]; then
          SOFA_OS_GITHUB="Linux"
        elif [[ "$SOFA_OS_GITHUB" == "Windows" ]]; then
          SOFA_OS_GITHUB="Win64"
        elif [[ "$SOFA_OS_GITHUB" == "macOS" ]]; then
          SOFA_OS_GITHUB="MacOS"
        fi
        url=https://github.com/sofa-framework/sofa/releases/download/${{ steps.get_sofa_from_github.outputs.tag_name }}/SOFA_${{ steps.get_sofa_from_github.outputs.tag_name }}_${SOFA_OS_GITHUB}.zip
        if ! ls -a "${{ inputs.sofa_root }}"/* >/dev/null 2>&1; then
          # directory does not exist or is empty
          mkdir -p "${{ runner.temp }}/sofa_tmp/zip" "${{ runner.temp }}/sofa_tmp/binaries"
          echo "Getting SOFA from $url"
          curl --output "${{ runner.temp }}/sofa_tmp/zip/sofa.zip" -L $url
          unzip -qq "${{ runner.temp }}"/sofa_tmp/zip/sofa.zip -d "${{ runner.temp }}/sofa_tmp/binaries"
          $SUDO mkdir -p "${{ inputs.sofa_root }}"
          $SUDO mv "${{ runner.temp }}"/sofa_tmp/binaries/SOFA_*/* "${{ inputs.sofa_root }}"
        fi
     
    - if: inputs.sofa_version == 'master'
      name: Get the latest SOFA ${{ inputs.sofa_version }} binaries from Jenkins
      shell: bash
      run: |
        # Download and install the latest SOFA ${{ inputs.sofa_version }} binaries
        SOFA_OS_JENKINS="$RUNNER_OS"
        if [[ "$SOFA_OS_GITHUB" == "Linux" ]]; then
          SOFA_OS_GITHUB="Linux"
        elif [[ "$SOFA_OS_GITHUB" == "Windows" ]]; then
          SOFA_OS_GITHUB="Windows"
        elif [[ "$SOFA_OS_GITHUB" == "macOS" ]]; then
          SOFA_OS_GITHUB="MacOS"
        fi
        if ! ls -a "${{ inputs.sofa_root }}"/* >/dev/null 2>&1; then
          # directory does not exist or is empty
          mkdir -p "${{ runner.temp }}/sofa_tmp/zip" "${{ runner.temp }}/sofa_tmp/binaries"
          urlPrefix="https://ci.inria.fr/sofa-ci-dev/job/nightly-generate-binaries/CI_BRANCH=${{ inputs.sofa_version }},CI_SCOPE=${{ inputs.sofa_scope }}"
          urlSuffix="artifact/${SOFA_OS_JENKINS}/*zip*/${SOFA_OS_JENKINS}.zip"
          url="$urlPrefix/lastBuild/$urlSuffix"
          if ! curl --output /dev/null --silent --head --fail "$url"; then
            echo 'There is no artifact for "lastBuild". Falling back on "lastSuccessfulBuild".'
            url="$urlPrefix/lastSuccessfulBuild/$urlSuffix"
          fi
          echo "Getting SOFA from $url"
          curl --output "${{ runner.temp }}/sofa_tmp/${SOFA_OS_JENKINS}.zip" -L $url
          unzip -qq "${{ runner.temp }}"/sofa_tmp/${SOFA_OS_JENKINS}.zip -d "${{ runner.temp }}/sofa_tmp/zip"
          unzip -qq "${{ runner.temp }}"/sofa_tmp/zip/${SOFA_OS_JENKINS}/SOFA_*.zip -d "${{ runner.temp }}/sofa_tmp/binaries"
          $SUDO mkdir -p "${{ inputs.sofa_root }}"
          $SUDO mv "${{ runner.temp }}"/sofa_tmp/binaries/SOFA_*/* "${{ inputs.sofa_root }}"
        fi

    - name: Log SOFA install directory
      shell: bash
      run: |
        echo "SOFA successfully downloaded and installed in ${{ inputs.sofa_root }}"
        echo '------------- inputs.sofa_root -------------'
        ls -la "${{ inputs.sofa_root }}"
        echo '--------------- git-info.txt ---------------'
        cat "${{ inputs.sofa_root }}"/git-info.txt 2>&1 || true

    - name: Set SOFA_ROOT and outputs.sofa_root
      id: set-sofa-root
      shell: bash
      run: |
        SOFA_ROOT="$(cd '${{ inputs.sofa_root }}' && pwd -W 2>/dev/null || pwd)"
        echo "SOFA_ROOT=$SOFA_ROOT" | tee -a $GITHUB_ENV
        echo "$SOFA_ROOT" >> $GITHUB_PATH
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "$SOFA_ROOT/bin" >> $GITHUB_PATH
        fi
        echo "::set-output name=sofa_root::$(echo $SOFA_ROOT)"

    - name: Remove SofaPython3 from SOFA binaries
      if: inputs.sofa_with_sofapython3 != 'true'
      shell: bash
      run: |
        # TODO: remove this step when SOFA "standard" no longer contains SP3
        echo "Removing SofaPython3 from SOFA binaries (if any)"
        rm -rf $SOFA_ROOT/plugins/SofaPython3*
        rm -rf $SOFA_ROOT/bin/SofaPython3*
        rm -rf $SOFA_ROOT/lib/SofaPython3*
